{"version":3,"sources":["assets/login-cover.png","app/views/containers/Landing/components/Login.js"],"names":["useStyles","makeStyles","theme","title","fontWeight","marginTop","paper","padding","spacing","margin","display","flexDirection","justifyContent","alignItems","height","maxHeight","form","width","submit","color","loginCover","backgroundColor","backgroundImage","LoginCover","backgroundSize","backgroundPosition","backgroundRepeat","Login","props","auth","useSelector","state","value","loading","dispatch","useDispatch","classes","useState","email","setEmail","password","setPassword","isShowPassword","setIsShowPassword","handleLogin","e","a","preventDefault","login","style","Container","component","sx","maxWidth","Box","mt","mb","Paper","elevation","minHeight","Grid","container","item","xs","sm","square","className","Typography","variant","size","marginLeft","onChange","clearError","onSubmit","noValidate","autoComplete","TextField","target","required","fullWidth","name","id","label","placeholder","autoFocus","InputProps","endAdornment","InputAdornment","position","type","IconButton","onClick","mr","LoadingButton","textAlign","Link","href","underline","clsx"],"mappings":"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","file":"static/js/32.f860a22c.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/login-cover.a710124e.png\";","import React, { useState } from 'react';\r\n\r\n// Redux\r\nimport { useSelector } from 'react-redux';\r\nimport { useDispatch } from 'react-redux';\r\nimport { clearError } from '../../../../redux/slices/authSlice';\r\nimport { login } from '../../../../redux/async/authAsync';\r\n\r\n// MUI Components  \r\nimport TextField from \"@mui/material/TextField\";\r\nimport Link from \"@mui/material/Link\";\r\nimport Box from \"@mui/material/Box\";\r\nimport Typography from \"@mui/material/Typography\";\r\nimport Paper from \"@mui/material/Paper\";\r\nimport Container from \"@mui/material/Container\";\r\nimport InputAdornment from \"@mui/material/InputAdornment\";\r\nimport IconButton from \"@mui/material/IconButton\";\r\nimport Grid from \"@mui/material/Grid\";\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\n\r\n// react-icons\r\nimport { MdLogin, MdPerson, MdVisibility, MdVisibilityOff } from 'react-icons/md';\r\n\r\n// Page Styling\r\nimport { makeStyles } from '@mui/styles';\r\nimport LoginCover from '../../../../../assets/login-cover.png'\r\nimport clsx from 'clsx';\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    title:{\r\n        fontWeight: \"bold\",\r\n        marginTop: 10\r\n    },\r\n    paper: {\r\n        padding: theme.spacing(4),\r\n        margin: theme.spacing(0, 0, 0, 0),\r\n        display: 'flex',\r\n        flexDirection: 'column',\r\n        justifyContent: \"left\",\r\n        alignItems: 'left',\r\n        height: '100%',\r\n        maxHeight: '100%', \r\n    },\r\n    form: {\r\n        width: '100%', // Fix IE 11 issue.\r\n        marginTop: theme.spacing(1),\r\n    },\r\n    submit: {\r\n        margin: theme.spacing(1, 0, 2, 0),\r\n        color: '#ffffff'\r\n    },\r\n    loginCover: {\r\n        backgroundColor: \"transparent !important\",\r\n        backgroundImage: `url(${LoginCover})`,\r\n        backgroundSize: \"cover\",\r\n        backgroundPosition: \"center\",\r\n        backgroundRepeat: \"no-repeat\",\r\n    }\r\n}));\r\n\r\nexport default function Login(props) {\r\n\r\n    // const maintenance = false;\r\n    const auth = useSelector((state) => state.auth.value)\r\n    const loading = auth?.loading;\r\n\r\n    const dispatch = useDispatch();\r\n    const classes = useStyles();\r\n\r\n    const [email, setEmail] = useState(\"\");\r\n    const [password, setPassword] = useState(\"\");\r\n    const [isShowPassword, setIsShowPassword] = useState(false);\r\n    const toggleIsShowPassword = () => setIsShowPassword(!isShowPassword);\r\n\r\n    const handleLogin = async (e) => {\r\n        e.preventDefault();\r\n        dispatch(login({ email, password }));\r\n    }\r\n\r\n    const handleClearError = () => {\r\n        dispatch(clearError());\r\n    }\r\n\r\n    return (\r\n        <div style={{ height: \"100%\", width: \"100%\" }}>\r\n            <Container component=\"main\" sx={{ maxWidth: '1100px !important' }}>\r\n                <Box sx={{ mt: 5, mb: 10 }}>\r\n                    <Paper elevation={0} sx={{ minHeight: 500 }}>\r\n                        <Grid container>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <Paper square elevation={0} className={classes.paper}>\r\n                                    <Box display=\"flex\" flexDirection=\"row\">\r\n                                        <Typography sx={{ mt: 2 }} variant=\"h5\" className={classes.title}>\r\n                                            Login\r\n                                        </Typography>\r\n                                        <MdLogin size={25} style={{ marginTop: 15 , marginLeft: 5}} />\r\n                                    </Box>\r\n                                    <form onChange={handleClearError} onSubmit={(e) => handleLogin(e)} className={classes.form} noValidate autoComplete=\"off\">\r\n                                        <TextField\r\n                                            onChange={(e) => { setEmail(e.target.value); }}\r\n                                            variant=\"outlined\"\r\n                                            size=\"large\"\r\n                                            margin=\"normal\"\r\n                                            required\r\n                                            fullWidth\r\n                                            name=\"email\"\r\n                                            id=\"email\"\r\n                                            label=\"Email\"\r\n                                            placeholder=\"Email\"\r\n                                            autoFocus\r\n                                            InputProps={{\r\n                                                endAdornment: (\r\n                                                    <InputAdornment position=\"end\">\r\n                                                        <MdPerson size={20} />\r\n                                                    </InputAdornment>\r\n                                                ),\r\n                                            }}\r\n                                        />\r\n                                        <TextField\r\n                                            type={isShowPassword ? \"text\" : \"password\"}\r\n                                            onChange={(e) => { setPassword(e.target.value); }}\r\n                                            variant=\"outlined\"\r\n                                            size=\"large\"\r\n                                            margin=\"normal\"\r\n                                            required\r\n                                            fullWidth\r\n                                            name=\"password\"\r\n                                            label=\"Password\"\r\n                                            placeholder=\"Password\"\r\n                                            id=\"password\"\r\n                                            InputProps={{\r\n                                                endAdornment: (\r\n                                                    <InputAdornment position=\"end\">\r\n                                                        <IconButton onClick={toggleIsShowPassword} size=\"small\" sx={{ mr: -0.5 }}>\r\n                                                            {isShowPassword ?\r\n                                                                <MdVisibility size={20} />\r\n                                                                :\r\n                                                                <MdVisibilityOff size={20} />\r\n                                                            }\r\n                                                        </IconButton>\r\n                                                    </InputAdornment>\r\n                                                ),\r\n                                            }}\r\n                                        />\r\n                                        <LoadingButton\r\n                                            type=\"submit\"\r\n                                            fullWidth\r\n                                            variant=\"contained\"\r\n                                            color=\"primary\"\r\n                                            className={classes.submit}\r\n                                            loading={loading}\r\n                                            sx={{ mt: 2 }}\r\n                                            size=\"large\"\r\n                                        >\r\n                                            Log In\r\n                                        </LoadingButton>\r\n                                        <Box textAlign=\"center\" mt={2}>\r\n                                            <Link href=\"#\" variant=\"body1\" underline=\"hover\">\r\n                                                Forgot password?\r\n                                            </Link>\r\n                                        </Box>\r\n                                    </form>\r\n                                </Paper>\r\n                            </Grid>\r\n                            <Grid item xs={12} sm={6}>\r\n                                <Paper square elevation={0} className={clsx(classes.paper, classes.loginCover)}></Paper>\r\n                            </Grid>\r\n                        </Grid>\r\n                    </Paper>\r\n                </Box>\r\n            </Container>\r\n        </div>\r\n    );\r\n}"],"sourceRoot":""}