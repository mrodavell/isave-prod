{"version":3,"sources":["app/repositories/verifyEmailRepository.js","app/views/containers/Landing/components/VerifiedEmailPage.js"],"names":["verifyEmailRepository","confirmVerification","params","a","csrfRequest","getToken","apiRequest","post","response","responseService","handleHTTPResponse","toastService","modalError","toString","resendVerification","VerifiedEmailPage","props","navigate","useNavigate","useParams","key","hash","React","useState","loading","setLoading","error","setError","email","setEmail","sending","setSending","emailSent","setEmailSent","handleResend","modalInfo","result","message","alert","handleCheckHash","useCallback","useEffect","mounted","Box","sx","height","display","flexDirection","justifyContent","alignItems","mt","CircularProgress","size","Typography","variant","color","Button","onClick","width","textAlign","TextField","onChange","e","target","value","required","fullWidth","id","label","name","type","LoadingButton"],"mappings":"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","file":"static/js/46.40d149ea.chunk.js","sourcesContent":["import apiRequest from '../services/api/apiService';\r\nimport csrfRequest from '../services/csrf/csrfService'; \r\nimport responseService from '../services/response/responseService'; \r\nimport toastService from '../services/toast/toastService';\r\n\r\nconst verifyEmailRepository = { \r\n    confirmVerification: async (params) => {\r\n        try {\r\n            await csrfRequest.getToken();\r\n            let response = await apiRequest({}).post('/verify-email', params);\r\n            return responseService.handleHTTPResponse(response, false, false);\r\n        } catch (e) {\r\n           toastService.modalError(e.toString());\r\n        }\r\n    },\r\n    resendVerification: async (params) => {\r\n        try {\r\n            await csrfRequest.getToken();\r\n            let response = await apiRequest({}).post('/resend-verification', params);\r\n            return responseService.handleHTTPResponse(response, false, false);\r\n        } catch (e) {\r\n           toastService.modalError(e.toString());\r\n        }\r\n    },\r\n}\r\n\r\nexport default verifyEmailRepository;","import React from 'react';\r\nimport { useParams, useNavigate } from 'react-router-dom';\r\n// Sercvices\r\nimport toastService from '../../../../services/toast/toastService';\r\n// Repositories\r\nimport verifyEmailRepository from '../../../../repositories/verifyEmailRepository';\r\n// MUI Components\r\nimport Box from '@mui/material/Box';\r\nimport { Button, Typography, TextField, CircularProgress } from '@mui/material';\r\nimport LoadingButton from '@mui/lab/LoadingButton';\r\n// react-icons\r\nimport { FaCheckCircle, FaTimesCircle } from 'react-icons/fa';\r\nimport { MdMarkEmailRead } from 'react-icons/md';\r\n\r\nexport default function VerifiedEmailPage(props) {\r\n\r\n    const navigate = useNavigate();\r\n    const { key, hash } = useParams();\r\n\r\n    const [loading, setLoading] = React.useState(false);\r\n    const [error, setError] = React.useState(false);\r\n    const [email, setEmail] = React.useState(\"\");\r\n    const [sending, setSending] = React.useState(false);\r\n    const [emailSent, setEmailSent] = React.useState(false);\r\n\r\n    const handleResend = async () => {\r\n        try {\r\n\r\n            setSending(true);\r\n\r\n            if (email === \"\") {\r\n                toastService.modalInfo(\"Please enter your registered email address\");\r\n                return false;\r\n            }\r\n\r\n            let result = await verifyEmailRepository.resendVerification({ email });\r\n\r\n            if (!result.error) {\r\n                setEmailSent(true);\r\n                setError(false);\r\n            } else {\r\n                setEmailSent(false);\r\n                setError(true);\r\n                toastService.modalError(result.message);\r\n            }\r\n\r\n        } catch (e) {\r\n            toastService.alert(e.toString());\r\n        } finally {\r\n            setSending(false);\r\n        }\r\n    }\r\n\r\n    const handleCheckHash = React.useCallback(async () => {\r\n        try {\r\n\r\n            setLoading(true);\r\n            let result = await verifyEmailRepository.confirmVerification({ key, hash });\r\n\r\n            if (!result.error) {\r\n                setError(false);\r\n            } else {\r\n                setError(true);\r\n            }\r\n\r\n        } catch (e) {\r\n            toastService.alert(e.toString());\r\n        } finally {\r\n            setLoading(false);\r\n        }\r\n    }, [key, hash]);\r\n\r\n    React.useEffect(() => {\r\n        let mounted = false\r\n\r\n        if (!mounted) {\r\n            handleCheckHash()\r\n        }\r\n\r\n        return () => mounted = true;\r\n    }, [handleCheckHash])\r\n\r\n    return (\r\n        <div>\r\n            <Box sx={{ height: '100vh' }}>\r\n                <Box sx={{ height: '100%' }} display=\"flex\" flexDirection=\"column\" justifyContent=\"center\" alignItems=\"center\">\r\n                    {loading &&\r\n                        <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"flex-start\" alignItems=\"center\" sx={{ mt: -35 }}>\r\n                            <CircularProgress size={55} />\r\n                            <Typography variant='h5' sx={{ mt: 2 }}>\r\n                                Verifying Email...\r\n                            </Typography>\r\n                        </Box>\r\n                    }\r\n                    {!loading && !error && !emailSent &&\r\n                        <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"flex-start\" alignItems=\"center\" sx={{ mt: -35 }}>\r\n                            <FaCheckCircle color='#00BFA5' size={100} />\r\n                            <Typography variant='h4' sx={{ mt: 4 }}>\r\n                                Email Verification Completed\r\n                            </Typography>\r\n                            <Typography variant='subtitle1' sx={{ mt: 2 }}>\r\n                                You have completed the email verification process.\r\n                            </Typography>\r\n                            <Typography variant='h5' sx={{ mt: 2 }}>\r\n                                Thank you for becoming part of us here in Bangko sa Balay Foundation Inc.\r\n                            </Typography>\r\n                            <Button variant='contained' sx={{ mt: 2 }} onClick={() => navigate('/login')}>Go to Login</Button>\r\n                        </Box>\r\n                    }\r\n                    {!loading && error && !emailSent &&\r\n                        <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"flex-start\" alignItems=\"center\" sx={{ mt: -35 }}>\r\n                            <FaTimesCircle color='#E45570' size={100} />\r\n                            <Typography variant='h4' sx={{ mt: 4 }}>\r\n                                Email Verification Expired\r\n                            </Typography>\r\n                            <Typography variant='subtitle1' sx={{ mt: 2, width: '70%', textAlign: 'center' }}>\r\n                                The verification code have expired but you may request to resend a verification code by entering your registered email here.\r\n                            </Typography>\r\n                            <TextField\r\n                                sx={{ mt: 2, width: 400 }}\r\n                                onChange={(e) => setEmail(e.target.value)}\r\n                                value={email}\r\n                                variant={\"outlined\"}\r\n                                size={\"small\"}\r\n                                required\r\n                                fullWidth\r\n                                id=\"email\"\r\n                                label=\"Email\"\r\n                                name=\"email\"\r\n                                type=\"email\"\r\n                            />\r\n                            <LoadingButton loading={sending} variant='contained' sx={{ mt: 2 }} onClick={() => handleResend()}>Resend Email Verification</LoadingButton>\r\n                        </Box>\r\n                    }\r\n                    {!loading && emailSent &&\r\n                        <Box display=\"flex\" flexDirection=\"column\" justifyContent=\"flex-start\" alignItems=\"center\" sx={{ mt: -35 }}>\r\n                            <MdMarkEmailRead color='#00BFA5' size={100} />\r\n                            <Typography variant='h4' sx={{ mt: 4 }}>\r\n                                We've sent a new verification link\r\n                            </Typography>\r\n                            <Typography variant='subtitle1' sx={{ mt: 2 }}>\r\n                                Please open and check your email to use the link.\r\n                            </Typography>\r\n                        </Box>\r\n                    }\r\n                </Box>\r\n            </Box>\r\n        </div>\r\n    )\r\n}\r\n"],"sourceRoot":""}